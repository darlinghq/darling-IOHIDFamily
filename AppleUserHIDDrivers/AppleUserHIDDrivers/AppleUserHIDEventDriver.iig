//
//  AppleUserHIDEventDriver.h
//  IOHIDFamily
//
//  Created by dekom on 1/14/19.
//

#ifndef AppleUserHIDEventDriver_h
#define AppleUserHIDEventDriver_h

#include <HIDDriverKit/IOUserHIDEventDriver.iig>

class AppleUserHIDEventDriver : public IOUserHIDEventDriver
{
private:
    virtual bool deviceSupported() LOCALONLY;
    virtual void printDescription() LOCALONLY;
    
protected:
    /*!
     * @function handleReport
     *
     * @abstract
     * Callback invoked when an input report is received from the device.
     *
     * @param timestamp
     * The timestamp of the report.
     *
     * @param report
     * Bytes that describe the report.
     *
     * @param reportLength
     * The length of the report.
     *
     * @param type
     * The report type.
     *
     * @param reportID
     * The report ID.
     */
    virtual void handleReport(uint64_t timestamp,
                              uint8_t *report,
                              uint32_t reportLength,
                              IOHIDReportType type,
                              uint32_t reportID) override LOCALONLY;
    
    /*!
     * @function parseElements
     *
     * @abstract
     * Parses the elements returned from IOHIDInterface::getElements() function.
     * This function will search for supported elements and bucketize them
     * according to their usage pages/usages.
     *
     * @param elements
     * An array of supported elements to be parsed.
     *
     * @return
     * Returns true on success.
     */
    virtual bool parseElements(OSArray *elements) override LOCALONLY;
    
    /*!
     * @function parseKeyboardElement
     *
     * @abstract
     * Parses an element to see if it supports keyboard usages.
     *
     * @param element
     * An IOHIDElement object to parse.
     *
     * @return
     * Returns true on success.
     */
    virtual bool parseKeyboardElement(IOHIDElement *element) override LOCALONLY;
    
    /*!
     * @function parseVendorElement
     *
     * @abstract
     * Parses an element to see if it supports vendor defined usages.
     *
     * @param element
     * An IOHIDElement object to parse.
     *
     * @return
     * Returns true on success.
     */
    bool parseVendorElement(IOHIDElement *element) LOCALONLY;
    
    /*!
     * @function handleVendorReport
     *
     * @abstract
     * Function called after receiving an input report from the device. Iterates
     * through vendor elements and dispatches vendor events if the element
     * value has been updated.
     *
     * @param timestamp
     * The timestamp of the input report.
     *
     * @param reportID
     * The report ID.
     */
    void handleVendorReport(uint64_t timestamp, uint32_t reportID) LOCALONLY;
    
    /*!
     * @function handleKeyboardReport
     *
     * @abstract
     * Function called after receiving an input report from the device. Iterates
     * through keyboard elements and dispatches keyboard events if the element
     * value has been updated.
     *
     * @param timestamp
     * The timestamp of the input report.
     *
     * @param reportID
     * The report ID.
     */
    virtual void handleKeyboardReport(uint64_t timestamp, uint32_t reportID) override LOCALONLY;
    
    virtual void dispatchEvent(IOHIDEvent *event) override LOCALONLY;
public:
    /*!
     * @function init
     *
     * @abstract
     * Initializes the object.
     *
     * @return
     * true on success.
     */
    virtual bool init() override;
    
    /*!
     * @function free
     *
     * @abstract
     * frees the object.
     */
    virtual void free() override;
    
    virtual kern_return_t Start(IOService * provider) override;
    virtual kern_return_t Stop(IOService * provider) override;
};

#endif /* AppleUserHIDEventDriver_h */
