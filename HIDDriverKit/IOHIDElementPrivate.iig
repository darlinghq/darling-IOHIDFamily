/*
 * Copyright (c) 2018-2019 Apple Inc. All rights reserved.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
 *
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. The rights granted to you under the License
 * may not be used to create, or enable the creation or redistribution of,
 * unlawful or unlicensed copies of an Apple operating system, or to
 * circumvent, violate, or enable the circumvention or violation of, any
 * terms of an Apple operating system software license agreement.
 *
 * Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
 */

#ifndef _HIDDRIVERKIT_IOHIDELEMENTPRIVATE_H
#define _HIDDRIVERKIT_IOHIDELEMENTPRIVATE_H

#include <HIDDriverKit/IOHIDElement.iig>
#include <DriverKit/OSContainer.iig>

typedef struct HIDButtonCapabilities HIDButtonCapabilities, *HIDButtonCapabilitiesPtr;
typedef struct HIDValueCapabilities HIDValueCapabilities, *HIDValueCapabilitiesPtr;
typedef struct HIDCollectionExtendedNode HIDCollectionExtendedNode, *HIDCollectionExtendedNodePtr;

class IOHIDElementContainer;
class IOHIDElementPrivate;

enum {
    kIOHIDTransactionStateIdle,
    kIOHIDTransactionStatePending,
};

enum {
    kIOHIDElementVariableSizeElement    = 0x1,
    kIOHIDElementVariableSizeReport     = 0x2
};

class LOCALONLY IOHIDElementPrivate: public IOHIDElement
{
private:
    virtual bool init(IOHIDElementContainer *owner, IOHIDElementType type);
    virtual void free(void);
    
    virtual IOHIDElementPrivate *newSubElement(uint16_t rangeIndex) const;
    virtual bool createSubElements();
    
    virtual IOHIDElementPrivate *arrayHandlerElement(
                                                IOHIDElementContainer *owner,
                                                IOHIDElementType type,
                                                IOHIDElementPrivate *child,
                                                IOHIDElementPrivate *parent);
    
    virtual bool processArrayReport(uint8_t reportID,
                                    void *reportData,
                                    uint32_t reportBits,
                                    uint64_t timestamp);
    
    virtual bool createDuplicateReport(uint8_t reportID,
                                       void *reportData,
                                       uint32_t *reportLength);
    
    virtual bool createArrayReport(uint8_t reportID,
                                   void *reportData,
                                   uint32_t *reportLength);
    
    virtual void setArrayElementValue(uint32_t index, uint32_t value);
    
    virtual void setOutOfBoundsValue();
    
public:
    
    static IOHIDElementPrivate *buttonElement(IOHIDElementContainer *owner,
                                              IOHIDElementType type,
                                              HIDButtonCapabilitiesPtr button,
                                              IOHIDElementPrivate *parent);
    
    static IOHIDElementPrivate *valueElement(IOHIDElementContainer *owner,
                                             IOHIDElementType type,
                                             HIDValueCapabilitiesPtr value,
                                             IOHIDElementPrivate *parent);
    
    static IOHIDElementPrivate *collectionElement(IOHIDElementContainer *owner,
                                                  IOHIDElementType type,
                                                  HIDCollectionExtendedNodePtr collection,
                                                  IOHIDElementPrivate *parent);
    
    static IOHIDElementPrivate *nullElement(IOHIDElementContainer *owner,
                                            uint32_t reportID,
                                            IOHIDElementPrivate *parent = 0);
    
    static IOHIDElementPrivate *reportHandlerElement(IOHIDElementContainer *owner,
                                                     IOHIDElementType type,
                                                     uint32_t reportID,
                                                     uint32_t reportBits);
    
    virtual bool addChildElement(IOHIDElementPrivate *child,
                                 bool arrayHeader);
    
    virtual bool processReport(uint8_t reportID,
                               void *reportData,
                               uint32_t reportBits,
                               uint64_t timestamp,
                               IOHIDElementPrivate **next,
                               IOOptionBits options);
    
    virtual bool createReport(uint8_t reportID,
                              void *reportData,
                              uint32_t *reportLength,
                              IOHIDElementPrivate **next);
    
    virtual void setMemoryForElementValue(IOVirtualAddress address,
                                          void *location);
    
    virtual void setRollOverElementPtr(IOHIDElementPrivate **rollOverElementPtr);
    
    virtual uint32_t getElementValueSize() const;
    virtual IOByteCount getByteSize();
    void setDataBits(OSData *data);
    virtual bool getReportType(IOHIDReportType *reportType) const;
    virtual void setReportSize(uint32_t numberOfBits);
    inline bool shouldTickleActivity() const;
    
    inline IOHIDElementPrivate *getNextReportHandler() const;
    virtual void setNextReportHandler(IOHIDElementPrivate *element);
    
    inline uint32_t getTransactionState() const;
    inline void setTransactionState(uint32_t state);
    
    virtual IOHIDElementCookie getCookie(void);
    virtual IOHIDElementType getType(void);
    virtual IOHIDElementCollectionType getCollectionType(void);
    virtual OSArray *getChildElements(void);
    virtual IOHIDElementPrivate *getParentElement(void);
    virtual uint32_t getUsagePage(void);
    virtual uint32_t getUsage(void);
    virtual uint32_t getReportID(void);
    virtual uint32_t getFlags(void);
    virtual uint32_t getReportSize(void);
    virtual uint32_t getReportBits(void);
    virtual uint32_t getReportCount(void);
    virtual uint32_t getLogicalMin(void);
    virtual uint32_t getLogicalMax(void);
    virtual uint32_t getPhysicalMin(void);
    virtual uint32_t getPhysicalMax(void);
    virtual uint32_t getUnit(void);
    virtual uint32_t getUnitExponent(void);
    virtual uint64_t getTimeStamp(void);
    
    virtual uint32_t getValue(void);
    virtual uint32_t getValue(IOOptionBits options);
    virtual void setValue(uint32_t value);
    
    virtual OSData *getDataValue(void);
    virtual OSData *getDataValue(IOOptionBits options);
    virtual void setDataValue(OSData *value);
    
    virtual IOReturn commit(IOHIDElementCommitDirection direction);
    
    virtual uint32_t getScaledValue(IOHIDValueScaleType type);
    virtual IOFixed getScaledFixedValue(IOHIDValueScaleType type);
    virtual IOFixed getScaledFixedValue(IOHIDValueScaleType type, IOOptionBits options);
    
    virtual void setCalibration(uint32_t min,
                                uint32_t max,
                                uint32_t saturationMin,
                                uint32_t saturationMax,
                                uint32_t deadZoneMin,
                                uint32_t deadZoneMax,
                                IOFixed granularity);
    
    virtual bool isVariableSize();
    void setVariableSizeInfo(uint8_t variableSize);
    uint8_t getVariableSizeInfo();
};

#endif /* _HIDDRIVERKIT_IOHIDELEMENTPRIVATE_H */
